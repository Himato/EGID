// <auto-generated />
using System;
using EGID.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EGID.Data.Migrations
{
    [DbContext(typeof(EgidDbContext))]
    [Migration("20200429232525_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EGID.Domain.Entities.CitizenDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("CardId")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FatherId")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<byte>("Gender")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("MotherId")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(2048)")
                        .HasMaxLength(2048);

                    b.Property<string>("PrivateKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Religion")
                        .HasColumnType("tinyint");

                    b.Property<byte>("SocialStatus")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("CitizenDetails");
                });

            modelBuilder.Entity("EGID.Domain.Entities.DeathCertificate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("CauseOfDeath")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(4098);

                    b.Property<string>("CitizenId")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime>("DateOfDeath")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("CitizenId")
                        .IsUnique();

                    b.ToTable("DeathCertificates");
                });

            modelBuilder.Entity("EGID.Domain.Entities.ExitHospitalRecord", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(4096);

                    b.Property<DateTime>("EnterDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExitDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HealthInfoId")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Medications")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(4096);

                    b.HasKey("Id");

                    b.HasIndex("HealthInfoId");

                    b.ToTable("ExitHospitalRecords");
                });

            modelBuilder.Entity("EGID.Domain.Entities.ExitHospitalRecordAttachment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ExitHospitalRecordId")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("ExitHospitalRecordId");

                    b.ToTable("ExitHospitalRecordAttachments");
                });

            modelBuilder.Entity("EGID.Domain.Entities.HealthInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<int>("BloodType")
                        .HasColumnType("int");

                    b.Property<string>("CitizenId")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Phone1")
                        .HasColumnType("nvarchar(24)")
                        .HasMaxLength(24);

                    b.Property<string>("Phone2")
                        .HasColumnType("nvarchar(24)")
                        .HasMaxLength(24);

                    b.Property<string>("Phone3")
                        .HasColumnType("nvarchar(24)")
                        .HasMaxLength(24);

                    b.HasKey("Id");

                    b.HasIndex("CitizenId")
                        .IsUnique();

                    b.ToTable("HealthInformation");
                });

            modelBuilder.Entity("EGID.Domain.Entities.HealthRecord", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(4096);

                    b.Property<string>("HealthInfoId")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Medications")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(4096);

                    b.HasKey("Id");

                    b.HasIndex("HealthInfoId");

                    b.ToTable("HealthRecords");
                });

            modelBuilder.Entity("EGID.Domain.Entities.HealthRecordAttachment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("HealthRecordId")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("HealthRecordId");

                    b.ToTable("HealthRecordAttachments");
                });

            modelBuilder.Entity("EGID.Domain.Entities.CitizenDetail", b =>
                {
                    b.OwnsOne("EGID.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<string>("CitizenDetailId")
                                .HasColumnType("nvarchar(128)");

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PostalCode")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("State")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("CitizenDetailId");

                            b1.ToTable("CitizenDetails");

                            b1.WithOwner()
                                .HasForeignKey("CitizenDetailId");
                        });

                    b.OwnsOne("EGID.Domain.ValueObjects.FullName", "FullName", b1 =>
                        {
                            b1.Property<string>("CitizenDetailId")
                                .HasColumnType("nvarchar(128)");

                            b1.Property<string>("FirstName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("LastName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SecondName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ThirdName")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("CitizenDetailId");

                            b1.ToTable("CitizenDetails");

                            b1.WithOwner()
                                .HasForeignKey("CitizenDetailId");
                        });
                });

            modelBuilder.Entity("EGID.Domain.Entities.DeathCertificate", b =>
                {
                    b.HasOne("EGID.Domain.Entities.CitizenDetail", "Citizen")
                        .WithOne("DeathCertificate")
                        .HasForeignKey("EGID.Domain.Entities.DeathCertificate", "CitizenId")
                        .HasConstraintName("FK_DeathCertificate_Citizen_CitizenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EGID.Domain.Entities.ExitHospitalRecord", b =>
                {
                    b.HasOne("EGID.Domain.Entities.HealthInfo", "HealthInfo")
                        .WithMany("ExitHospitalRecords")
                        .HasForeignKey("HealthInfoId")
                        .HasConstraintName("FK_ExitHospitalRecords_HealthInfo_HealthInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EGID.Domain.Entities.ExitHospitalRecordAttachment", b =>
                {
                    b.HasOne("EGID.Domain.Entities.ExitHospitalRecord", "ExitHospitalRecord")
                        .WithMany("Attachments")
                        .HasForeignKey("ExitHospitalRecordId")
                        .HasConstraintName("FK_ExitHospitalRecordAttachment_ExitHospitalRecord_ExitHospitalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EGID.Domain.Entities.HealthInfo", b =>
                {
                    b.HasOne("EGID.Domain.Entities.CitizenDetail", "Citizen")
                        .WithOne("HealthInfo")
                        .HasForeignKey("EGID.Domain.Entities.HealthInfo", "CitizenId")
                        .HasConstraintName("FK_HealthInfo_Citizen_CitizenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EGID.Domain.Entities.HealthRecord", b =>
                {
                    b.HasOne("EGID.Domain.Entities.HealthInfo", "HealthInfo")
                        .WithMany("HealthRecords")
                        .HasForeignKey("HealthInfoId")
                        .HasConstraintName("FK_HealthRecords_HealthInfo_HealthInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EGID.Domain.Entities.HealthRecordAttachment", b =>
                {
                    b.HasOne("EGID.Domain.Entities.HealthRecord", "HealthRecord")
                        .WithMany("Attachments")
                        .HasForeignKey("HealthRecordId")
                        .HasConstraintName("FK_HealthRecordAttachment_HealthRecord_HealthRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
